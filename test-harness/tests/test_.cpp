#include "CppUTest/TestHarness.h"

extern "C" 
{
    #include "c_driver_digimesh_parser.h"
}


TEST_GROUP(Test) 
{
    void setup()
    {
        digi_init();
    }

    void teardown()
    {
    }

    digi_serial_t id = {.serial = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}};
    
    digi_status_t register_digi()
    {
        return digi_register(&id);
    }

    void are_two_message_equal(uint8_t * message_a, uint8_t * message_b, uint8_t message_length)
    {
        for( uint8_t idx = 0; idx < message_length; idx++)
        {
            LONGS_EQUAL(message_a[idx], message_b[idx]);
        }
    }

    #define IS_DIGI_REGISTERED()\
        CHECK(digi_is_initialized());

    #define NO_DIGI_REGISTERED()\
        CHECK(!digi_is_initialized());

    #define IS_OK(status)\
        CHECK(status == DIGI_OK);

    #define ARE_MESSAGES_EQUAL(message_a, message_b, message_length) \
        CHECK(are_two_message_equal(message_a, message_b, message_length));
};

/********/
/* Zero */
/********/

// Check that the no digi module are registered after initialization
TEST(Test, check_state_is_empty_on_init)
{
    NO_DIGI_REGISTERED();
}

/*******/
/* One */
/*******/

// Initialize the digi module state and then check that it's initialized
TEST(Test, check_state_is_not_empty_after_initialization)
{
    register_digi();
    IS_DIGI_REGISTERED();
}

TEST(Test, check_generated_message_correct)
{
    digi_at_command_t field = DIGI_AT_CH;
    uint8_t value[] = {0x0A};
    uint8_t value_length = sizeof(value)/sizeof(value[0]);
    uint8_t generated_message[DIGI_MAXIMUM_MESSAGE_SIZE] = {0};

    IS_OK(digi_generate_set_field_message(field, value, value_length, &generated_message[0]));

    LONGS_EQUAL(0x7E, generated_message[0]);
    LONGS_EQUAL(0x00, generated_message[1]);
    LONGS_EQUAL(0x05, generated_message[2]);
    LONGS_EQUAL(0x08, generated_message[3]);
    LONGS_EQUAL(0x01, generated_message[4]);
    LONGS_EQUAL(0x43, generated_message[5]);
    LONGS_EQUAL(0x48, generated_message[6]);
    LONGS_EQUAL(0x0A, generated_message[7]);
    LONGS_EQUAL(0x61, generated_message[8]);
}

// TEST(Test, create_message_to_configure_device_network_id)
// {
//     digi_at_command_t field = DIGI_AT_ID;
    
//     uint8_t value[] = {0x0A,0xA0};
//     uint8_t value_length = sizeof(value)/sizeof(value[0]);

//     uint8_t generated_message[DIGI_MAXIMUM_MESSAGE_SIZE] = {0};

//     IS_OK(digi_generate_set_field_message(field, value, value_length, &generated_message[0]));

//     // Generated by XCTU
//     uint8_t expected_message[] = {0x7E, 0x00, 0x06, 0x08, 0x01, 0x49, 0x44, 0x0A, 0x0A, 0x55};
//     uint8_t expected_message_length = 10;

//     ARE_MESSAGES_EQUAL(generated_message, expected_message, expected_message_length);
    
// }

TEST(Test, create_message_to_configure_device_network_channel)
{
    digi_at_command_t field = DIGI_AT_CH;
    
    uint8_t value[] = {0x0A};
    uint8_t value_length = sizeof(value)/sizeof(value[0]);

    uint8_t generated_message[DIGI_MAXIMUM_MESSAGE_SIZE] = {0};

    IS_OK(digi_generate_set_field_message(field, value, value_length, &generated_message[0]));

    // Generated by XCTU
    uint8_t expected_message[] = {0x7E, 0x00, 0x05, 0x08, 0x01, 0x43, 0x48, 0x0A, 0x61};
    uint8_t expected_message_length = sizeof(expected_message)/sizeof(expected_message[0]);

    are_two_message_equal(expected_message, generated_message, expected_message_length);
}


/********/
/* Many */
/********/
